openapi: 3.0.3
info:
  title: Auth Lab API
  description: Authentication and User Management API
  version: 1.0.0
  contact:
    name: Vivi Veras
    email: dveras2310@gmail.com
    url: https://veras-app.netlify.app/
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.auth-lab.com
    description: Production server

tags:
  - name: Users
    description: User management operations
  - name: Authentication
    description: Authentication operations

paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              example1:
                summary: Example registration
                value:
                  username: "johndoe"
                  email: "john@example.com"
                  password: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - Email already registered or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailExists:
                  summary: Email already exists
                  value:
                    error: "Email already registered"
                validationError:
                  summary: Validation error
                  value:
                    error: "Validation failed"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate user and return access and refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              example1:
                summary: Example login
                value:
                  email: "john@example.com"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: Invalid credentials
                  value:
                    error: "Invalid credentials"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users (passwords excluded)
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '404':
          description: No users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                noUsers:
                  summary: No users found
                  value:
                    error: "No users found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (MongoDB ObjectId)
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "507f1f77bcf86cd799439011"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              updateUsername:
                summary: Update username only
                value:
                  username: "newusername"
              updateEmail:
                summary: Update email only
                value:
                  email: "newemail@example.com"
              updateMultiple:
                summary: Update multiple fields
                value:
                  username: "newusername"
                  email: "newemail@example.com"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request - Invalid ID format or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  summary: User not found
                  value:
                    error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID (MongoDB ObjectId)
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "507f1f77bcf86cd799439011"
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad request - Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  summary: User not found
                  value:
                    error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get current authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  summary: User not found
                  value:
                    error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout current user (client should discard tokens)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully. Please discard token on client."
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/token/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generate a new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              example1:
                summary: Example refresh token request
                value:
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Refresh token missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingToken:
                  summary: Refresh token missing
                  value:
                    error: "Refresh token missing"
        '403':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidToken:
                  summary: Invalid refresh token
                  value:
                    error: "Invalid refresh token"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT token with Bearer prefix

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          description: Username (3-30 characters)
          example: "johndoe"
        email:
          type: string
          format: email
          description: Valid email address
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          description: Password (minimum 6 characters)
          example: "password123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "john@example.com"
        password:
          type: string
          description: User password
          example: "password123"

    UpdateUserRequest:
      type: object
      minProperties: 1
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          description: New username (3-30 characters)
          example: "newusername"
        email:
          type: string
          format: email
          description: New email address
          example: "newemail@example.com"
        password:
          type: string
          minLength: 6
          description: New password (minimum 6 characters)
          example: "newpassword123"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Valid refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    UserResponse:
      type: object
      properties:
        _id:
          type: string
          description: User ID (MongoDB ObjectId)
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          description: Username
          example: "johndoe"
        email:
          type: string
          format: email
          description: User email address
          example: "john@example.com"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2023-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-01T00:00:00.000Z"

    ProfileResponse:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          description: Username
          example: "johndoe"
        email:
          type: string
          format: email
          description: User email address
          example: "john@example.com"

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (expires in 1 hour)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token (long-lived)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: New JWT access token (expires in 1 hour)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Error description"
